.MODEL SMALL
.STACK 100H
.DATA
    CR EQU 0DH
    LF EQU 0AH 
    MSG1 DB 'WRONG INTEGER $'
    MSG2 DB  'OPEN result.txt TO SEE THE OUTPUT $'
    INPUT DB "input.txt",0
    OUTPUT DB "result.txt",0
    INHANDLE DW ?
    OUTHANDLE DW ?
    INTEGER DB 0
    BUFFER DB 0 
    A DB 0
    
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    CALL OPEN_INPUT
    CALL OPEN_OUTPUT
    JMP READ_INT
OPEN_INPUT PROC NEAR
    MOV AH,3DH
    LEA DX,INPUT
    MOV AL,0
    INT 21H
    MOV INHANDLE,AX 
    RET
    OPEN_INPUT ENDP
OPEN_OUTPUT PROC NEAR
    MOV AH,3CH
    LEA DX,OUTPUT
    MOV CL,1
    INT 21H
    MOV OUTHANDLE,AX
    RET
    OPEN_OUTPUT ENDP

READ_INT:
    LEA DX,BUFFER
    MOV AH,3FH
    MOV BX,INHANDLE
    MOV CX,1
    INT 21H 
    CMP BUFFER,2DH
    JE PRINT_WRONG
    CMP BUFFER,0AH
    JE CHECK_NUM
    CMP BUFFER,30H
    JL READ_INT
    CMP BUFFER,39H
    JA READ_INT
    
    XOR AH,AH
    MOV AL,BUFFER
    SUB AL,'0'
    MOV BUFFER,AL
    MOV AL,INTEGER
    MOV BL,10
    MUL BL
    ADD AL,BUFFER
    MOV INTEGER,AL
    JMP READ_INT
    
CHECK_NUM:
    CMP INTEGER,26
    JA PRINT_WRONG
    JLE READ_CHAR      
READ_CHAR:
    LEA DX,BUFFER
    MOV AH,3FH
    MOV BX,INHANDLE
    MOV CX,1
    INT 21H
    CMP AX,CX
    JL OK
    
CMP BUFFER,65
JL PRINT    
CMP BUFFER,90
JLE DEC_CAP_CHAR
CMP BUFFER,97
JL PRINT
CMP BUFFER,122
JLE DEC_SMA_CHAR
JMP PRINT

DEC_CAP_CHAR:
    MOV AL,INTEGER
    SUB BUFFER,AL
    CMP BUFFER,65
    JL CIRCLE
    CMP BUFFER,90
    JLE PRINT
DEC_SMA_CHAR:
    MOV AL,INTEGER
    SUB BUFFER,AL
    CMP BUFFER,97
    JL CIRCLE
    JMP PRINT
    
CIRCLE:
    ADD BUFFER,26
    
PRINT:
    MOV AH,40H
    MOV BX,OUTHANDLE
    MOV CX,1
    INT 21H
    JMP READ_CHAR 

PRINT_WRONG:
    LEA DX,MSG1 
    MOV AH,9
    INT 21H
    JMP CLOSE

OK:

    LEA DX,MSG2
    MOV AH,9
    INT 21H
    JMP CLOSE        
CLOSE:
    MOV AH,3EH
    INT 21H
    JMP FINISH
FINISH:
 MOV AH,4CH
 INT 21H   

    END MAIN
    