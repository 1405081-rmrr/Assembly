.MODEL SMALL
.STACK 100H
.DATA
    MUL_NUM DB 10D
    MSG1 DB 'WRONG INTEGER $'
    MSG2 DB  'OPEN C:\emu8086\MyBuild\result.txt TO SEE THE OUTPUT $'
    INPUT DB "input.txt",0
    OUTPUT DB "result.txt",0
    INHANDLE DW ?
  
    OUTHANDLE DW ?
    INTEGER DB 0
    BUFFER DB 0 
    A DB 0
    
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    CALL OPEN_INPUT ;OPEN EXISTING INPUT FILE
    CALL OPEN_OUTPUT  ;OPEN NEW OUTPUT FILE
    JMP READ_INT
    main endp  ;READ FIRST LINE OF INPUT FILE
OPEN_INPUT PROC NEAR
    MOV AH,3DH  ;open existing file
    LEA DX,INPUT
    MOV AL,0 ;read only
    INT 21H
    MOV INHANDLE,AX;if successful then AX=file handle 
    RET
    OPEN_INPUT ENDP
OPEN_OUTPUT PROC NEAR
    MOV AH,3CH  ;open file function
    LEA DX,OUTPUT
    MOV CL,1 ;write only
    INT 21H
    MOV OUTHANDLE,AX ;if successful then AX=file handle
    RET
    OPEN_OUTPUT ENDP

READ_INT:
    LEA DX,BUFFER
    MOV AH,3FH ;READ FUNCTION
    MOV BX,INHANDLE
    MOV CX,1
    INT 21H 
    CMP BUFFER,2DH ;IF MINUS SIGN THEN WRONG
    JE PRINT_WRONG
    CMP BUFFER,0AH ;(NEW LINE)
    JE CHECK_NUM
    CMP BUFFER,30H ;ASCII OF 0
    JL READ_INT
    CMP BUFFER,39H  ;ASCHII OF 9
    JA READ_INT
    
    XOR AX,AX
    MOV AL,BUFFER
    SUB AL,'0'
    MOV BUFFER,AL
    MOV AL,INTEGER
    MOV BL,MUL_NUM
    MUL BL
    ADD AL,BUFFER
    MOV INTEGER,AL
    JMP READ_INT
    
CHECK_NUM:
    CMP INTEGER,26
    ;JA PRINT_WRONG
    JA GET_INT
    JLE READ_CHAR 
    
    
GET_INT:
    XOR BX,BX
    XOR AX,AX
    XOR CX,CX
    MOV BL,26
    MOV AL,INTEGER 
    DIV BL 
    MOV CX,1
    MOV INTEGER,AH
    JMP READ_CHAR     
READ_CHAR:
    LEA DX,BUFFER
    MOV AH,3FH ;READ FUNCTION
    MOV BX,INHANDLE
    MOV CX,1 ;READ ONE BYTE
    INT 21H
    CMP AX,CX
    JL OK
    
CMP BUFFER,20H ;SPACE
JE PRINT
CMP BUFFER,65
;JL PRINT
JE DEC_CAP_CHAR
JA CAPITAL_CASE    


CAPITAL_CASE:

    CMP BUFFER,90 
    JLE DEC_CAP_CHAR 
    JA SMALL_CASEA

SMALL_CASEA:

    CMP BUFFER,97
    JE DEC_SMA_CHAR
    JA SMALL_CASEZ
    
SMALL_CASEZ:

    CMP BUFFER,122
    JLE DEC_SMA_CHAR   
DEC_CAP_CHAR:
    MOV AL,INTEGER
    SUB BUFFER,AL
    CMP BUFFER,65
    JL CIRCLE
    CMP BUFFER,90
    JLE PRINT
DEC_SMA_CHAR:
    MOV AL,INTEGER
    SUB BUFFER,AL
    CMP BUFFER,97
    JL CIRCLE
    JMP PRINT
    
CIRCLE:
    ADD BUFFER,26
    
PRINT:
    MOV AH,40H  ;write function
    MOV BX,OUTHANDLE
    MOV CX,1 ;write one byte
    INT 21H
    JMP READ_CHAR 

PRINT_WRONG:
    LEA DX,MSG1 
    MOV AH,9
    INT 21H
    JMP CLOSE

OK:

    LEA DX,MSG2
    MOV AH,9
    INT 21H
    JMP CLOSE        
CLOSE:
    MOV AH,3EH
    INT 21H
    JMP FINISH
FINISH:
 MOV AH,4CH
 INT 21H   

    END MAIN
    